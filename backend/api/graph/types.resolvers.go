package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/romshark/taskhub/api/graph/model"
)

// Tasks is the resolver for the tasks field.
func (r *projectResolver) Tasks(ctx context.Context, obj *model.Project) ([]*model.Task, error) {
	return r.DataProvider.GetTasksByProject(ctx, obj.ID)
}

// Members is the resolver for the members field.
func (r *projectResolver) Members(ctx context.Context, obj *model.Project) ([]*model.User, error) {
	return r.DataProvider.GetProjectMembers(ctx, obj.ID)
}

// IsBlockedBy is the resolver for the isBlockedBy field.
func (r *taskResolver) IsBlockedBy(ctx context.Context, obj *model.Task) ([]*model.Task, error) {
	return r.DataProvider.GetBlockingTasks(ctx, obj.ID)
}

// RelatesTo is the resolver for the relatesTo field.
func (r *taskResolver) RelatesTo(ctx context.Context, obj *model.Task) ([]*model.Task, error) {
	return r.DataProvider.GetRelatedTasks(ctx, obj.ID)
}

// Projects is the resolver for the projects field.
func (r *userResolver) Projects(ctx context.Context, obj *model.User) ([]*model.Project, error) {
	return r.DataProvider.GetUserProjects(ctx, obj.ID)
}

// TasksAssigned is the resolver for the tasksAssigned field.
func (r *userResolver) TasksAssigned(ctx context.Context, obj *model.User) ([]*model.Task, error) {
	return r.DataProvider.GetTasksAssignedToUser(ctx, obj.ID)
}

// TasksReported is the resolver for the tasksReported field.
func (r *userResolver) TasksReported(ctx context.Context, obj *model.User) ([]*model.Task, error) {
	return r.DataProvider.GetTasksReportedByUser(ctx, obj.ID)
}

// Project returns ProjectResolver implementation.
func (r *Resolver) Project() ProjectResolver { return &projectResolver{r} }

// Task returns TaskResolver implementation.
func (r *Resolver) Task() TaskResolver { return &taskResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type projectResolver struct{ *Resolver }
type taskResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
