package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"time"

	"github.com/romshark/taskhub/api/auth"
	"github.com/romshark/taskhub/api/graph/model"
	"github.com/romshark/taskhub/api/validate"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, email string, password string, displayName string, role string, location string, manager *string, subordinates []string) (*model.User, error) {
	if err := validate.EmailAddress(email); err != nil {
		return nil, err
	}
	if err := validate.UserPassword(password); err != nil {
		return nil, err
	}
	if err := validate.UserDisplayName(displayName); err != nil {
		return nil, err
	}
	if err := validate.UserRole(role); err != nil {
		return nil, err
	}
	if err := validate.UserLocation(location); err != nil {
		return nil, err
	}

	passwordHash, err := r.Resolver.PasswordHasher.HashPassword([]byte(password))
	if err != nil {
		return nil, fmt.Errorf("hashing password: %w", err)
	}

	return r.DataProvider.CreateUser(
		ctx, email, passwordHash, displayName, role,
		location, manager, subordinates,
	)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, email string, displayName string, role string, location string, personalStatus *string, manager *string, subordinates []string) (*model.User, error) {
	if err := auth.RequireOwner(ctx, id); err != nil {
		return nil, err
	}
	if err := validate.EmailAddress(email); err != nil {
		return nil, err
	}
	if err := validate.UserDisplayName(displayName); err != nil {
		return nil, err
	}
	if err := validate.UserRole(role); err != nil {
		return nil, err
	}
	if err := validate.UserLocation(location); err != nil {
		return nil, err
	}

	if personalStatus != nil {
		if err := validate.UserPersonalStatus(*personalStatus); err != nil {
			return nil, err
		}
	}

	return r.DataProvider.UpdateUser(
		ctx,
		id,
		email,
		displayName,
		role,
		location,
		personalStatus,
		manager,
		subordinates,
	)
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, title string, project string, status model.TaskStatus, priority model.TaskPriority, description *string, due *time.Time, tags []string, assignees []string, reporters []string, blocks []string, relatesTo []string) (*model.Task, error) {
	if err := auth.RequireAuthenticated(ctx); err != nil {
		return nil, err
	}
	if err := validate.TaskTitle(title); err != nil {
		return nil, err
	}
	for _, t := range tags {
		if err := validate.TaskTag(t); err != nil {
			return nil, err
		}
	}

	newTask, err := r.DataProvider.CreateTask(
		ctx,
		r.TimeProvider.Now(),
		title,
		project,
		status,
		priority,
		description,
		due,
		tags,
		assignees,
		reporters,
		blocks,
		relatesTo,
	)
	if err != nil {
		return nil, err
	}

	go r.broadcastTaskUpsert.Notify(context.Background(), newTask)

	return newTask, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, title string, description *string, status model.TaskStatus, priority model.TaskPriority, due *time.Time, tags []string, project string, assignees []string, reporters []string, blocks []string, relatesTo []string) (*model.Task, error) {
	if err := auth.RequireAuthenticated(ctx); err != nil {
		return nil, err
	}
	if err := validate.TaskTitle(title); err != nil {
		return nil, err
	}
	for _, t := range tags {
		if err := validate.TaskTag(t); err != nil {
			return nil, err
		}
	}

	updated, err := r.DataProvider.UpdateTask(
		ctx,
		id,
		title,
		description,
		status,
		priority,
		due,
		tags,
		project,
		assignees,
		reporters,
		blocks,
		relatesTo,
	)
	if err != nil {
		return nil, err
	}

	go r.broadcastTaskUpsert.Notify(context.Background(), updated)

	return updated, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, name string, description string, slug string, owners []string) (*model.Project, error) {
	if err := auth.RequireAuthenticated(ctx); err != nil {
		return nil, err
	}
	if err := validate.ProjectName(name); err != nil {
		return nil, err
	}
	if err := validate.ProjectDescription(description); err != nil {
		return nil, err
	}
	if err := validate.ProjectSlug(slug); err != nil {
		return nil, err
	}

	newProject, err := r.DataProvider.CreateProject(
		ctx,
		r.TimeProvider.Now(),
		name,
		description,
		slug,
		owners,
	)
	if err != nil {
		return nil, err
	}

	go r.broadcastProjectUpsert.Notify(context.Background(), newProject)

	return newProject, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, name string, description string, slug string, owners []string) (*model.Project, error) {
	if err := auth.RequireAuthenticated(ctx); err != nil {
		return nil, err
	}
	if err := validate.ProjectName(name); err != nil {
		return nil, err
	}
	if err := validate.ProjectDescription(description); err != nil {
		return nil, err
	}
	if err := validate.ProjectSlug(slug); err != nil {
		return nil, err
	}

	updated, err := r.DataProvider.UpdateProject(
		ctx,
		id,
		name,
		description,
		slug,
		owners,
	)
	if err != nil {
		return nil, err
	}

	go r.broadcastProjectUpsert.Notify(context.Background(), updated)

	return updated, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
