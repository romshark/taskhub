// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ProjectsFilters struct {
	Members       []string   `json:"members,omitempty"`
	CreatedBefore *time.Time `json:"createdBefore,omitempty"`
	CreatedAfter  *time.Time `json:"createdAfter,omitempty"`
}

type TasksFilters struct {
	Assignees     []string     `json:"assignees,omitempty"`
	Reporters     []string     `json:"reporters,omitempty"`
	Projects      []string     `json:"projects,omitempty"`
	Status        []TaskStatus `json:"status,omitempty"`
	Tags          []string     `json:"tags,omitempty"`
	CreatedBefore *time.Time   `json:"createdBefore,omitempty"`
	CreatedAfter  *time.Time   `json:"createdAfter,omitempty"`
}

type UsersFilters struct {
	Name     string   `json:"name"`
	Projects []string `json:"projects,omitempty"`
}

type ProjectsOrder string

const (
	ProjectsOrderNameAlpha  ProjectsOrder = "NAME_ALPHA"
	ProjectsOrderNumMembers ProjectsOrder = "NUM_MEMBERS"
	ProjectsOrderNumTasks   ProjectsOrder = "NUM_TASKS"
)

var AllProjectsOrder = []ProjectsOrder{
	ProjectsOrderNameAlpha,
	ProjectsOrderNumMembers,
	ProjectsOrderNumTasks,
}

func (e ProjectsOrder) IsValid() bool {
	switch e {
	case ProjectsOrderNameAlpha, ProjectsOrderNumMembers, ProjectsOrderNumTasks:
		return true
	}
	return false
}

func (e ProjectsOrder) String() string {
	return string(e)
}

func (e *ProjectsOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectsOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectsOrder", str)
	}
	return nil
}

func (e ProjectsOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskPriority string

const (
	TaskPriorityBlocker TaskPriority = "BLOCKER"
	TaskPriorityHigh    TaskPriority = "HIGH"
	TaskPriorityMedium  TaskPriority = "MEDIUM"
	TaskPriorityLow     TaskPriority = "LOW"
)

var AllTaskPriority = []TaskPriority{
	TaskPriorityBlocker,
	TaskPriorityHigh,
	TaskPriorityMedium,
	TaskPriorityLow,
}

func (e TaskPriority) IsValid() bool {
	switch e {
	case TaskPriorityBlocker, TaskPriorityHigh, TaskPriorityMedium, TaskPriorityLow:
		return true
	}
	return false
}

func (e TaskPriority) String() string {
	return string(e)
}

func (e *TaskPriority) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskPriority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskPriority", str)
	}
	return nil
}

func (e TaskPriority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusTodo       TaskStatus = "TODO"
	TaskStatusInProgress TaskStatus = "IN_PROGRESS"
	TaskStatusDone       TaskStatus = "DONE"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusTodo,
	TaskStatusInProgress,
	TaskStatusDone,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusTodo, TaskStatusInProgress, TaskStatusDone:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TasksOrder string

const (
	TasksOrderPriority     TasksOrder = "PRIORITY"
	TasksOrderCreationTime TasksOrder = "CREATION_TIME"
	TasksOrderDueTime      TasksOrder = "DUE_TIME"
	TasksOrderTitleAlpha   TasksOrder = "TITLE_ALPHA"
)

var AllTasksOrder = []TasksOrder{
	TasksOrderPriority,
	TasksOrderCreationTime,
	TasksOrderDueTime,
	TasksOrderTitleAlpha,
}

func (e TasksOrder) IsValid() bool {
	switch e {
	case TasksOrderPriority, TasksOrderCreationTime, TasksOrderDueTime, TasksOrderTitleAlpha:
		return true
	}
	return false
}

func (e TasksOrder) String() string {
	return string(e)
}

func (e *TasksOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TasksOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TasksOrder", str)
	}
	return nil
}

func (e TasksOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UsersOrder string

const (
	UsersOrderNameAlpha UsersOrder = "NAME_ALPHA"
)

var AllUsersOrder = []UsersOrder{
	UsersOrderNameAlpha,
}

func (e UsersOrder) IsValid() bool {
	switch e {
	case UsersOrderNameAlpha:
		return true
	}
	return false
}

func (e UsersOrder) String() string {
	return string(e)
}

func (e *UsersOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsersOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsersOrder", str)
	}
	return nil
}

func (e UsersOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
